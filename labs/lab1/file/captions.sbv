0:00:13.290,0:00:19.440
я вас приветствую я евгений ковальчук а вы на канале в pdf добро пожаловать на первый урок

0:00:20.200,0:00:27.329
священный шаблоном проектирования и в сегодняшнем видео мы с вами рассмотрим первый порождающий паттерн это

0:00:27.820,0:00:30.180
синглтон что ж это такое в действительности

0:00:30.820,0:00:37.349
в определении нет ничего сложного это просто объект который есть системе в одном экземпляре

0:00:38.200,0:00:41.189
плюс к нему есть какая-то глобальная точка доступа

0:00:41.890,0:00:49.680
этот паттерн использовался так часто что из разряда паттернов он даже перешел анти паттерн и но и тем не менее

0:00:49.960,0:00:57.630
его реализация вполне актуально когда же данный шаблон может понадобиться он нужен каждый раз когда у вас в системе

0:00:58.090,0:01:04.680
должен быть объект в едином экземпляре и которому может быть доступ из разных частей программы

0:01:05.170,0:01:12.119
под это подходит очень много реализаций если интернет магазин то эта корзина или карта клиента

0:01:12.820,0:01:18.959
какая-то мультимедийная система то это может быть instance player и для начала давайте рассмотрим

0:01:19.420,0:01:27.150
самый элементарный пример это создание синглтон с помощью литерала объекта как вы знаете java script

0:01:27.460,0:01:33.690
объекты никогда не будут равны между собой то есть если я создам два объекта с абсолютно

0:01:33.880,0:01:35.880
одинаковым набором значений и

0:01:36.159,0:01:42.689
сравните два объекта то получу falls да даже если я просто попробую сравнить два пустых объекта

0:01:43.180,0:01:45.180
результат все равно будет falls

0:01:45.340,0:01:51.299
поэтому можно смело сделать вывод что каждый раз когда мы попытаемся создать объект с помощью

0:01:51.580,0:01:56.969
литерала у нас получится синглтон то есть объект находящийся в одном экземпляре

0:01:57.580,0:02:03.629
пока я надеюсь все понятно теперь переходим чуть более адекватному примеру как вы помните

0:02:04.030,0:02:09.000
создавать объекты в java script можно не только с помощью литерала но и с помощью

0:02:09.399,0:02:12.658
функции конструктора new для того чтобы создать

0:02:13.299,0:02:15.659
синглтон существует два основных подхода

0:02:16.299,0:02:22.259
можно создать глобальную переменную и обращаться к ней после чего весь код завернуть в моду

0:02:22.770,0:02:28.559
и второй вариант это определить синглтон внутри объекта и для начала мы рассмотрим первый вариант

0:02:29.080,0:02:31.080
выглядит он следующим образом

0:02:31.300,0:02:33.070
данная реализация

0:02:33.070,0:02:38.730
объявляет сущность instance и функцию конструктор каунта внутри данного класса

0:02:39.370,0:02:40.390
реализован

0:02:40.390,0:02:47.100
пользовательский конструктор который проверяет существует ли instance если его нет он создает его и

0:02:47.590,0:02:52.890
начинает на него ссылаться если же он есть то конструктор получает ссылку на него

0:02:53.170,0:02:57.930
в результате чего у нас системе появляется объект instance и

0:02:58.390,0:03:03.419
конструктор со ссылкой на этот объект и теперь любой объект созданный при помощи конструктора

0:03:03.910,0:03:08.700
каунтер будет получать ссылку на instance а не создавать каждый раз новый

0:03:09.280,0:03:11.280
instance чтобы было более понятно

0:03:11.620,0:03:18.149
давайте немного расширим наш класс каутер добавив ему некое взаимодействие с нашим синглтон

0:03:18.400,0:03:21.300
смотрите тут нет ничего сложного в наш конструктор

0:03:21.550,0:03:27.540
мы поместили свойства аккаунт и два метода get каунт который возвращает значение счетчика

0:03:27.670,0:03:31.229
и и нкр iscount который увеличивает значение счетчика

0:03:31.780,0:03:34.800
теперь смотрите мы создаем два объекта

0:03:35.530,0:03:39.149
используя наш конструктор и начинаем изменять счетчик

0:03:39.459,0:03:46.589
обратите внимание что метод increase каунт я вызываю два раза у первого объекта и два раза 2 объекта

0:03:46.780,0:03:48.780
это важно после чего

0:03:49.150,0:03:56.550
выводим полученное значение в консоль у обоих объектов и как вы можете видеть в обоих случаях значение счетчика

0:03:56.920,0:04:02.670
4 то есть несмотря на то что у нас два разных объекта созданных при помощи функции

0:04:03.160,0:04:07.380
конструктора они все равно ссылается на один объект синглтон

0:04:08.080,0:04:10.080
изменяет его четыре раза

0:04:10.120,0:04:16.560
способ которой мы рассмотрели реализует за данный паттерн но его проблема в том что для этой реализации

0:04:16.930,0:04:18.930
мы создали глобальную переменную

0:04:19.450,0:04:21.450
instance а как вы знаете

0:04:21.700,0:04:28.169
использование глобальных переменных это не совсем хороший тон тем более эту переменную можно по неосторожности

0:04:28.690,0:04:32.640
изменить предыдущей версии языка для решения этой проблемы

0:04:33.800,0:04:39.879
использовалась анонимная сама вызывающая ся функция мы же используем синтаксис есть 6 и

0:04:40.159,0:04:42.159
поэтому наше решение будет

0:04:42.439,0:04:47.889
более элегантным и выглядит она следующим образом как вы видите в этой

0:04:48.289,0:04:51.009
реализацией мы сохранили ссылку на экземпляр

0:04:51.979,0:04:57.788
статическом свойстве конструктора и теперь мы можем спокойно выполнить ту же самую проверку

0:04:58.430,0:05:00.430
подводя итог всему вышесказанному

0:05:01.189,0:05:02.659
повторим ещё раз

0:05:02.659,0:05:07.718
синглтон это довольно простой порождающий поттер который гарантирует что у класса

0:05:08.120,0:05:12.549
есть только один экземпляр и в целом это все на сегодня не

0:05:13.069,0:05:15.699
забывайте ставить лайк если вам понравилось видео и

0:05:16.219,0:05:23.469
подписываться на канал впереди вас ждет целый курс по паттернам ну что ж увидимся следующем видео пока
